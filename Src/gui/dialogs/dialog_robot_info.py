# -*- coding: utf-8 -*-
import pyqtgraph as pg
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QDialog

import pybullet_planning as pp


# Form implementation generated from reading ui file 'dialog_robot_info.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


class Ui_DialogRobotInfo(object):
    def setupUi(self, DialogRobotInfo):
        DialogRobotInfo.setObjectName("DialogRobotInfo")
        DialogRobotInfo.resize(683, 657)
        DialogRobotInfo.setMinimumSize(QtCore.QSize(683, 554))
        self.widget_graph_rail = PlotWidget(DialogRobotInfo)
        self.widget_graph_rail.setGeometry(QtCore.QRect(10, 10, 321, 161))
        self.widget_graph_rail.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_graph_rail.setObjectName("widget_graph_rail")
        self.widget_graph_shoulder = PlotWidget(DialogRobotInfo)
        self.widget_graph_shoulder.setGeometry(QtCore.QRect(350, 10, 321, 161))
        self.widget_graph_shoulder.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_graph_shoulder.setObjectName("widget_graph_shoulder")
        self.widget_graph_elbow = PlotWidget(DialogRobotInfo)
        self.widget_graph_elbow.setGeometry(QtCore.QRect(10, 230, 321, 161))
        self.widget_graph_elbow.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_graph_elbow.setObjectName("widget_graph_elbow")
        self.widget_graph_wrist = PlotWidget(DialogRobotInfo)
        self.widget_graph_wrist.setGeometry(QtCore.QRect(350, 230, 321, 161))
        self.widget_graph_wrist.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_graph_wrist.setObjectName("widget_graph_wrist")
        self.lbl_info_rail = QtWidgets.QLabel(DialogRobotInfo)
        self.lbl_info_rail.setGeometry(QtCore.QRect(130, 170, 71, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_info_rail.setFont(font)
        self.lbl_info_rail.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_info_rail.setObjectName("lbl_info_rail")
        self.lbl_info_shoulder = QtWidgets.QLabel(DialogRobotInfo)
        self.lbl_info_shoulder.setGeometry(QtCore.QRect(450, 170, 101, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_info_shoulder.setFont(font)
        self.lbl_info_shoulder.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_info_shoulder.setObjectName("lbl_info_shoulder")
        self.lbl_info_wrist = QtWidgets.QLabel(DialogRobotInfo)
        self.lbl_info_wrist.setGeometry(QtCore.QRect(460, 390, 81, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_info_wrist.setFont(font)
        self.lbl_info_wrist.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_info_wrist.setObjectName("lbl_info_wrist")
        self.lbl_info_elbow = QtWidgets.QLabel(DialogRobotInfo)
        self.lbl_info_elbow.setGeometry(QtCore.QRect(130, 390, 81, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_info_elbow.setFont(font)
        self.lbl_info_elbow.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_info_elbow.setObjectName("lbl_info_elbow")
        self.btn_pause = QtWidgets.QPushButton(DialogRobotInfo)
        self.btn_pause.setGeometry(QtCore.QRect(500, 620, 75, 23))
        self.btn_pause.setObjectName("btn_pause")
        self.btn_close = QtWidgets.QPushButton(DialogRobotInfo)
        self.btn_close.setGeometry(QtCore.QRect(590, 620, 75, 23))
        self.btn_close.setObjectName("btn_close")
        self.cmb_mode = QtWidgets.QComboBox(DialogRobotInfo)
        self.cmb_mode.setGeometry(QtCore.QRect(20, 620, 111, 22))
        self.cmb_mode.setObjectName("cmb_mode")
        self.cmb_mode.addItem("")
        self.cmb_mode.addItem("")
        self.cmb_mode.addItem("")
        self.widget_graph_probe = PlotWidget(DialogRobotInfo)
        self.widget_graph_probe.setGeometry(QtCore.QRect(10, 450, 661, 161))
        self.widget_graph_probe.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_graph_probe.setObjectName("widget_graph_probe")
        self.lbl_info_probe_voltage = QtWidgets.QLabel(DialogRobotInfo)
        self.lbl_info_probe_voltage.setGeometry(QtCore.QRect(270, 620, 121, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_info_probe_voltage.setFont(font)
        self.lbl_info_probe_voltage.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_info_probe_voltage.setObjectName("lbl_info_probe_voltage")

        self.retranslateUi(DialogRobotInfo)
        QtCore.QMetaObject.connectSlotsByName(DialogRobotInfo)

    def retranslateUi(self, DialogRobotInfo):
        _translate = QtCore.QCoreApplication.translate
        DialogRobotInfo.setWindowTitle(_translate("DialogRobotInfo", "Robot Info"))
        self.lbl_info_rail.setText(_translate("DialogRobotInfo", "Rail Position"))
        self.lbl_info_shoulder.setText(_translate("DialogRobotInfo", "Shoulder Position"))
        self.lbl_info_wrist.setText(_translate("DialogRobotInfo", "Wrist Position"))
        self.lbl_info_elbow.setText(_translate("DialogRobotInfo", "Elbow Position"))
        self.btn_pause.setText(_translate("DialogRobotInfo", "Pause"))
        self.btn_close.setText(_translate("DialogRobotInfo", "Close"))
        self.cmb_mode.setItemText(0, _translate("DialogRobotInfo", "Position"))
        self.cmb_mode.setItemText(1, _translate("DialogRobotInfo", "Velocity"))
        self.cmb_mode.setItemText(2, _translate("DialogRobotInfo", "Acceleration"))
        self.lbl_info_probe_voltage.setText(_translate("DialogRobotInfo", "Probe Potential"))


from pyqtgraph import PlotWidget


class DialogRobotInfo(QDialog):

    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_DialogRobotInfo()
        self.ui.setupUi(self)

        self.REFRESH_RATE = 50
        self.MAX_ELEMS_DISP = 50

        self.parent_instance = parent
        self.controller_instance = parent.controller
        self.sim = self.controller_instance.simulation_instance
        # self.rbt = controller_instance.robot_instance

        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update)

        self.sim_pen = pg.mkPen(color=(0, 0, 255))
        self.rbt_pen = pg.mkPen(color=(255, 0, 0))
        self.goal_pen = pg.mkPen(color=(0, 255, 0))

        self.sim_rail_line = self.ui.widget_graph_rail.plot([0], [0], pen=self.sim_pen)
        self.sim_shoulder_line = self.ui.widget_graph_shoulder.plot([0], [0], pen=self.sim_pen)
        self.sim_elbow_line = self.ui.widget_graph_elbow.plot([0], [0], pen=self.sim_pen)
        self.sim_wrist_line = self.ui.widget_graph_wrist.plot([0], [0], pen=self.sim_pen)
        self.probe_pot_line = self.ui.widget_graph_probe.plot([0], [0], pen=self.sim_pen)

        self.ui.btn_pause.clicked.connect(self.toggle_pause)
        self.ui.btn_close.clicked.connect(self.close)

        self.stored_positions = {
            "RAIL": [0],
            "SHOULDER": [0],
            "ELBOW": [0],
            "WRIST": [0],
            "PROBE_POT": [0]
        }

        self.t = [0]

        self.update_timer.start(self.REFRESH_RATE)

    def update(self):
        self.t.append(self.t[-1] + self.REFRESH_RATE)

        ## SIM POSITIONS (todo, add check for mode to select between pos/vel/accel)

        # read positions and assign the time and position to dict
        read_pos = pp.get_joint_positions(self.sim.sim_robot, [1,2,3,4])
        self.stored_positions["RAIL"].append(read_pos[0])
        self.stored_positions["SHOULDER"].append(read_pos[2])  # Skipped waist as will be disabled
        self.stored_positions["ELBOW"].append(read_pos[3])
        self.stored_positions["WRIST"].append(read_pos[4])
        self.stored_positions["PROBE_POT"].append(self.controller_instance.probe_voltage)

        # create X and Y axis values.
        rail_plot_data = (self.stored_positions["RAIL"])[-min(len(self.t), self.MAX_ELEMS_DISP):]
        shoulder_plot_data = self.stored_positions["SHOULDER"][-min(len(self.t), self.MAX_ELEMS_DISP):]
        elbow_plot_data = self.stored_positions["ELBOW"][-min(len(self.t), self.MAX_ELEMS_DISP):]
        wrist_plot_data = self.stored_positions["WRIST"][-min(len(self.t), self.MAX_ELEMS_DISP):]
        probe_plot_data = self.stored_positions["PROBE_POT"][-min(len(self.t), self.MAX_ELEMS_DISP):]
        x_plot_data = self.t[-min(len(self.t), self.MAX_ELEMS_DISP):]

        # update the graphs
        self.sim_rail_line.setData(x_plot_data, rail_plot_data)
        self.sim_shoulder_line.setData(x_plot_data, shoulder_plot_data)
        self.sim_elbow_line.setData(x_plot_data, elbow_plot_data)
        self.sim_wrist_line.setData(x_plot_data, wrist_plot_data)
        self.probe_pot_line.setData(x_plot_data, probe_plot_data)

    def trim(self):
        pass  # trims list to avoid huge memory usage, might not be neccessary.

    def toggle_pause(self):
        if self.update_timer.isActive():
            self.update_timer.stop()
        else:
            self.update_timer.start(self.REFRESH_RATE)
